//{ Driver Code Starts
import java.io.*;
import java.util.*;

class IntArray {
    public static int[] input(BufferedReader br, int n) throws IOException {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for (int i = 0; i < n; i++) a[i] = Integer.parseInt(s[i]);

        return a;
    }

    public static void print(int[] a) {
        for (int e : a) System.out.print(e + " ");
        System.out.println();
    }

    public static void print(ArrayList<Integer> a) {
        for (int e : a) System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while (t-- > 0) {

            int n;
            n = Integer.parseInt(br.readLine());

            int[] arr = IntArray.input(br, n);

            Solution obj = new Solution();
            ArrayList<Integer> res = obj.duplicates(arr);

            IntArray.print(res);
        }
    }
}

// } Driver Code Ends



class Solution {
    public static ArrayList<Integer> duplicates(int[] arr) {
        // code here
        int n = arr.length;
        ArrayList<Integer> list = new ArrayList<>();
        ArrayList<Integer> list1 = new ArrayList<>();
        if(n == 0){
            list.add(-1);
            return list;
        }
        Arrays.sort(arr);
        for(int i : arr){
            if(list.contains(i)){ 
                if(!list1.contains(i)) list1.add(i);
            }
            list.add(i);
        }
        if(list1.isEmpty()) list1.add(-1);
        return list1;
    }
}
Solution 2:

class Solution {
  public static ArrayList<Integer> duplicates(int[] arr) {
    int n = arr.length;
    ArrayList<Integer> list = new ArrayList<>();
    Set<Integer> seen = new HashSet<>(); // Use HashSet to store unique elements

    for (int num : arr) {
      if (seen.contains(num)) {
        list.add(num); // Add the duplicate to the list
        // Optionally, for finding only the first occurrence:
        // break;
      }
      seen.add(num);
    }

    if (list.isEmpty()) {
      list.add(-1); // If no duplicates found, add -1
    }
    return list;
  }
}
