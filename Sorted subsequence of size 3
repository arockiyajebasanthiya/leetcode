int n = arr.length;
        if (n < 3) return new ArrayList<>();  // Not possible to find such triplet

        // Create arrays to store the smallest element to the left of i and the largest to the right of i
        int[] leftMin = new int[n];
        int[] rightMax = new int[n];

        // Fill leftMin array
        leftMin[0] = arr[0];
        for (int i = 1; i < n; i++) {
            leftMin[i] = Math.min(leftMin[i - 1], arr[i]);
        }

        // Fill rightMax array
        rightMax[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], arr[i]);
        }

        // Find the triplet
        for (int j = 1; j < n - 1; j++) {
            if (arr[j] > leftMin[j - 1] && arr[j] < rightMax[j + 1]) {
                List<Integer> result = new ArrayList<>();
                result.add(leftMin[j - 1]);
                result.add(arr[j]);
                result.add(rightMax[j + 1]);
                return result;
            }
        }

        // No such triplet found
        return new ArrayList<>();
