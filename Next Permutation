import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> permutation) 
	{
		// Write your code here.
		int n = permutation.size();
        
        // Step 1: Find the largest index i such that arr[i] < arr[i+1]
        int i = n - 2;
        while (i >= 0 && permutation.get(i) >= permutation.get(i + 1)) {
            i--;
        }
        
        // If we found such an i, we proceed to the next steps
        if (i >= 0) {
            // Step 2: Find the largest index j such that arr[j] > arr[i]
            int j = n - 1;
            while (permutation.get(j) <= permutation.get(i)) {
                j--;
            }
            
            // Step 3: Swap arr[i] and arr[j]
            Collections.swap(permutation, i, j);
        }
        
        // Step 4: Reverse the array from i+1 to the end
        reverse(permutation, i + 1, n - 1);
        
        return permutation;
    }
    
    // Helper function to reverse part of the ArrayList
    private static void reverse(ArrayList<Integer> arr, int start, int end) {
        while (start < end) {
            Collections.swap(arr, start, end);
            start++;
            end--;
        }
	}
}
